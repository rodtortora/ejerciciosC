Ej 4 - Realizar funciones para obtener el grado de Entrada, el grado de Salida y el grado de un
Vértice; para un digrafo almacenado en:
a.- una Matriz de Adyacencia
b.- una Lista de Adyacencia

Ej 5 – Idem ejercicio anterior para un grafo almacenado en:
a.- una Matriz de Adyacencia
b.- una Lista de Adyacencia
c.- una Multilista
d.- el triángulo superior de una Matriz de Adyacencia

d)

int grV(int vertice, int Mat[][], int N) {
	int grado = 0;
	int i,j;
	for (i=0;i<vertice;i++) {
		if (Mat[i][vertice] != 0) {
			grado++;
		}
	}
	for (j=vertice;j<N;j++) {
		if (Mat[vertice][j] != 0) {
			grado++;
		}
	}	
	return grado;
}

c)

Typedef struct nodo {
    int i,j, costo;
    struct nodo *sigi;
    struct nodo *sigj;
} nodo;
Typedef struct nodo *TMLista;

int grV (TMLista LM, int V[], int pos) {
    int grado = 0;
    TMLista aux;
    aux = V[pos];
    while (aux != NULL) {
        grado++;
        if (aux -> i == pos)
            aux = aux -> sigi;
        else
            aux = aux -> sigj;
    }
    return grado;
}


a)

int grV (int vertice, int Mat[][], int N) {
	int grado = 0;
	int j;
	for (j=0;j<N;j++) {
		if (Mat[vertice][j] == 1)
			grado++;
	}
	return grado;
}

b)

Typedef struct nodo {
	int V;
	struct nodo *sig;
} nodo;
Typedef struct nodo *TLista;

int grV (int vertice, int V[]) {
	TLista aux;
	int grado = 0;
	aux = V[vertice];
	while (aux != NULL) {
		grado++;
		aux = aux->sig;
	}
	return grado;	
}

Ej 6 - Realizar funciones que permitan agregar un arco y eliminar un arco; para un grafo almacenado
en:
a.- una Matriz de Adyacencia
b.- una Lista de Adyacencia
c.- una Multilista

a)
void agregar(int vi, int vj, int mat[][]) {
    Mat[vi][vj] = 1;
    Mat[vj][vi] = 1;
}

b)
Typedef struct nodo {
    int v, costo;
    struct nodo *sig;
}
typedef struct nodo *TLista;

void agregar(int costo, int vi, int vj, int V[]) {
    TLista aux, nuevo;
    nuevo->costo = costo;
    nuevo = (TLista)malloc(sizeof(nodo));
    nuevo->sig = V[vi];
    V[vi] = nuevo;
    if (vj != vi) {
        nuevo = (TLista)malloc(sizeof(nodo));
		nuevo->sig = V[vj];
		V[vj] = nuevo;
    }

}
c)
Typedef struct nodo {
	int vi, vj, costo;
	struct nodo *sigi, *sigj;
} nodo;
Typedef struct nodo *TMLista;

void agregar(int costo, int V[], int vi, int vj) {
	TMLista nuevo;
	nuevo = (TMLista)malloc(sizeof(nodo));
	nuevo->sigi = V[vi];
	nuevo->sigj = V[vj];
	nuevo->vi = vi;
	nuevo->vj = vj;
	nuevo->costo = costo;
	V[vi] = nuevo;
	V[vj] = nuevo;
}

